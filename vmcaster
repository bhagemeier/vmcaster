#!/usr/bin/env python
import sys

import vmcasterpub.dishpubdb as model
import vmcasterpub.state as dishpubstate
import vmcasterpub.uploader as uploader
from vmcasterpub.versioning import bumpVersion
from vmcasterpub.process import hostUploader, InputError

import os.path
import logging
import optparse
from vmcasterpub.__version__ import version
import urllib2
import urllib
import hashlib
import datetime
import os, statvfs
import shutil
import commands
try:
    import simplejson as json
except:
    import json

import urlparse
import subprocess
import time
import types
# needed for the signing of images.
import M2Crypto.BIO
import M2Crypto.SMIME
import M2Crypto.X509
import tempfile
import urlparse
import magic

import optparse


def uglyUriParser(uri):
    parsedUri = urlparse.urlsplit(uri)
    if isinstance(parsedUri, tuple):
        # We are probably python 2.4
        networklocation = parsedUri[1].split(':')
        hostname = networklocation[0]
        port = ""
        if len (networklocation) > 1:
            port = networklocation[1]
        return { "scheme" : parsedUri[0],
            "path" : parsedUri[2],
            "hostname" : hostname,
            "port" : port,
        }
    if isinstance(parsedUri,urlparse.SplitResult):
        # We are probably python 2.6
        return { "scheme" : parsedUri.scheme,
            "path" : parsedUri.path,
            "hostname" : parsedUri.hostname,
            "port" : parsedUri.port,
        }

def uglyUriBuilder(components):
    if not isinstance(components, dict):
        #We only process dictionaries
        return None
    if not 'scheme' in components:
        #Need the protocol
        return None
    if not 'hostname' in components:
        #Need the hostname
        return None
    output = "%s://%s" % (components['scheme'],components['hostname'])
    if 'port' in components:
        output += ":%s" % (components['port'])
    if 'path' in components:
        output +=  "/%s" % (components['path'])
    return output
    
        
        
    


def checkVoms(requiredExtensions = set([])):
    log = logging.getLogger("vomscheck")
    cmd = "voms-proxy-info  --all"
    process = subprocess.Popen([cmd], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    processRc = None
    handleprocess = True
    counter = 0
    stdout = ''
    stderr = ''
    while handleprocess:
        counter += 1
        time.sleep(1)
        cout,cerr = process.communicate()
        stdout += cout
        stderr += cerr
        process.poll()
        processRc = process.returncode
        if processRc != None:
            break
        if counter == timeout:
            os.kill(process.pid, signal.SIGQUIT)
        if counter > timeout:
            os.kill(process.pid, signal.SIGKILL)
            processRc = -9
            break
    
    if processRc != 0:
        log.error("Failed to run voms-proxy-info sucessfully")
        log.info("stdout:%s" % (stdout))
        log.info("stderr:%s" % (stderr))
        return None
    vomsInfo = {}
    foundVos = set([])
    issuer = None
    identity = None
    for lineUnclean in stdout.split('\n'):
        foundPos = lineUnclean.find(':')
        if foundPos > 0:
            head = lineUnclean[:foundPos].strip(' \t\n\r')
            tail = lineUnclean[(foundPos +1):].strip(' \t\n\r')
            if head == 'timeleft':
                if tail == '0:00:00':
                    log.error("Proxy expired.")
                    return None
            if head == 'VO':
                foundVos.add(tail)
            if head == 'identity':
                identity = tail
    if len(requiredExtensions.difference(foundVos)) > 0:
        log.error("not all extensions found")
        return None
    return identity


def main():
    """Runs program and handles command line options"""
    p = optparse.OptionParser(version = "%prog " + version)
    p.add_option('-d', '--database', action ='store', help='Database conection string')
    p.add_option('-L', '--logfile', action ='store',help='Logfile configuration file.', metavar='CFG_LOGFILE')
    p.add_option('-C', '--config-file', action ='store',help='Configuration file.', metavar='CFG_FILE')
    p.add_option('--x509-dir', action ='store',help='Directory for x.509 certificates and keys.', metavar='DISH_X509_DIR')
    p.add_option('--x509-cert', action ='store',help='Path of x.509 Certificate.', metavar='DISH_X509_CERT')
    p.add_option('--x509-key', action ='store',help='Path of x.509 Key.', metavar='DISH_X509_KEY')
    p.add_option('--list-imagelist', action ='store_true',help='list imageslists by "dc:identifier".')
    p.add_option('--list-image', action ='store_true',help='list Images by "dc:identifier".')    
    p.add_option('--list-endorser', action ='store_true',help='list Endorsers by "hv:dn".')
    
    p.add_option('--import-imagelist-smime', action ='store',help='Import a signed imagelist from path.', metavar='IMAGE_PATH')
    p.add_option('--import-imagelist-json', action ='store',help='Import an image list as json.', metavar='IMAGE_PATH')
        
    p.add_option('--upload-image', action ='store',help='Path for image to be uploaded. The image format should be detected automatically and compresed if needed.')
    p.add_option('--upload-imagelist', action ='store_true',help="""Update the image list with a newly signed image list. 
Expect to type in your grid certificate password to sign a new imagelist, and then transfer the new imagewlist 
and replace the master copy.""")
    
    p.add_option('--select-imagelist', action ='store',help='Select "imagelist" by "dc:identifier".', metavar='IMAGELIST_UUID')
    p.add_option('--select-image', action ='store',help='Select "image" by "dc:identifier"', metavar='IMAGELIST_UUID')
    p.add_option('--select-endorser', action ='store',help='Select "endorser" by "hv:dn".', metavar='ENDORSER_UUID')
    
    p.add_option('--show-imagelist', action ='store_true',help='Write json imagelist. This option requires an "imagelist" selection.')
    p.add_option('--show-image', action ='store_true',help='Write json image metadata. This option requires an "image" selection.')        
    p.add_option('--show-endorser', action ='store_true',help='Write json endorser metadata by "hv:dn". This option requires an "endorser" selection.')
        
    p.add_option('--add-imagelist', action ='store_true',help='Imagelist create. This option requires an "imagelist" selection.')
    p.add_option('--add-image', action ='store_true',help='Image create.')
    p.add_option('--add-endorser', action ='store_true',help='Endorser create.')
    
    p.add_option('--del-imagelist', action ='store_true',help='Imagelist delete. This option requires an "imagelist" selection.')
    p.add_option('--del-image', action ='store_true',help='Image delete. This option requires an "image" selection.')
    p.add_option('--del-endorser', action ='store',help='Endorser delete.')
    
    p.add_option('--imagelist-add-endorser', action ='store_true',help='Bind Endorser to imagelist. This option requires an "imagelist" and an "endorser" selection.')
    p.add_option('--imagelist-del-endorser', action ='store_true',help='Unbind Endorser to imagelist. This option requires an "imagelist" and an "endorser" selection.')
    
    p.add_option('--keys-imagelist', action ='store_true',help='List imagelist metadata keys. . This option requires an "image" selection.')
    p.add_option('--keys-image', action ='store_true',help='List image metadata keys. This option requires an "image" selection.')
    p.add_option('--keys-endorser', action ='store',help='List endorser metadata keys. This option requires an "endorser" selection.')
    p.add_option('--key-set-endorser', action ='store',help="""Endorser metadata key to create/overwrite. 
As Guidence Keys should follow a pattern of "namespace:type".
This option requires an "endorser" selection and a "--key-value-endorser" """)
    p.add_option('--key-set-imagelist', action ='store',help="""Imagelist metadata key to create/overwrite.
As Guidence Keys should follow a pattern of "namespace:type".
This option requires an "imagelist" selection and a "--key-value-imagelist" paramer.""")
    p.add_option('--key-set-image', action ='store',help="""Image metadata key to create/overwrite.
As Guidence Keys should follow a pattern of "namespace:type".
This option requires an "image" selection and a "--key-value-image" paramer.""")
    
    p.add_option('--key-del-imagelist', action ='store',help='Imagelist metadata key to delete. This option requires an "image" selection.')
    p.add_option('--key-del-image', action ='store',help='Image metadata key to delete. This option requires an "image" selection.')
    p.add_option('--key-del-endorser', action ='store_true',help='Endorser metadata key to delete. This option requires an "endorser" selection.')
    
    p.add_option('--key-value-imagelist', action ='store',help='Imagelist metadata value to set. This option requires an "imagelist" selection and a "--key-set-imagelist" paramer.')
    p.add_option('--key-value-image', action ='store',help='Image metadata value to set. This option requires an "image" selection and a "--key-set-image" paramer.')
    p.add_option('--key-value-endorser', action ='store',help='Endorser metadata value to set.This option requires an "endorser" selection and a "--key-set-endorser" paramer.')
        
    options, arguments = p.parse_args()
    
    # Set up basic variables
    logFile = None
    databaseConnectionString = None
    imagelistUUID = None
    imagelist_req = False
    imagelist_key = None
    imagelist_key_set_req = False
    imagelist_key_value = None
    imagelist_key_value_add_req = False
    imagelist_import_json = None
    imageUuid = None
    image_key = None
    image_key_req = False
    image_req = None
    image_key_value = None
    image_key_value_add_req = False
    endorserSub = None
    endorser_req  = False
    endorserKey = None
    endorserKeyReq = False
    
    endorserValue = None
    endorserValueReq = False
    
    imageFileLocal = None
    dishCfg = 'publisher.cfg'
    applicationHome = None
    pathX509Key = None
    pathX509Cert = None

    
    signingPathDefaultKey = None
    signingPathDefaultCert = None
    signingPathHome = None
    
    
    
    dishCfg = None
    # Read enviroment variables
    if 'DISH_LOG_CONF' in os.environ:
        logFile = os.environ['VMILS_LOG_CONF']
    if 'DISH_RDBMS' in os.environ:
        databaseConnectionString = os.environ['VMILS_RDBMS']
    if 'DISH_CFG' in os.environ:
        dishCfg = os.environ['DISH_CFG']
    if 'HOME' in os.environ:
        applicationHome = os.environ['HOME']
    
    if 'DISH_X509_DIR' in os.environ:
        pathX509Dir = os.environ['DISH_X509_DIR']
    if 'DISH_X509_KEY' in os.environ:
        pathX509Key = os.environ['DISH_X509_KEY']
    if 'DISH_X509_CERT' in os.environ:
        pathX509Cert = os.environ['DISH_X509_CERT']

    
    # Set up log file
    if options.logfile:
        logFile = options.logfile
    if logFile != None:
        if os.path.isfile(str(options.logfile)):
            logging.config.fileConfig(options.logfile)
        else:
            logging.basicConfig(level=logging.INFO)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.logfile))
            sys.exit(1)
    else:
        logging.basicConfig(level=logging.INFO)
    log = logging.getLogger("main")
    
    # Now process command line
    actions = set([])
    
    if options.select_endorser:
        endorserSub = options.select_endorser

    if options.list_endorser:
        actions.add('endorser_list')
        
    if options.show_endorser:
        actions.add('endorser_show')
        endorser_req = True
        
    if options.add_endorser:
        actions.add('endorser_add')
        

    if options.del_endorser:
        actions.add('endorser_del')
        endorserSub = options.del_endorser

    if options.key_set_endorser:
        actions.add('endorser_key_set')
        endorserKey = options.key_set_endorser
        
    if options.key_del_endorser:
        actions.add('endorser_key_del')
        endorser_req = True

    if options.key_value_endorser:
        endorserValue = options.key_value_endorser
        endorser_req = True
    if options.imagelist_add_endorser:
        endorser_req = True
        imagelist_req = True
        actions.add('connect')
    if options.imagelist_del_endorser:
        endorser_req = True
        imagelist_req = True
        actions.add('disconnect')
    
    if options.select_imagelist:
        imagelistUUID = options.select_imagelist
    if options.list_imagelist:
        actions.add('imagelist_list')
    if options.upload_imagelist:
        actions.add('imagelist_upload')
        imagelist_req = True
    if options.add_imagelist:
        actions.add('imagelist_add')
        imagelist_req = True

    if options.del_imagelist:
        actions.add('imagelist_del')
        imagelist_req = True
    
    if options.show_imagelist:
        actions.add('imagelist_show')
        imagelist_req = True
        
    if options.keys_imagelist:
        actions.add('imagelist_keys')
        imagelist_req = True
        
    if options.key_set_imagelist:
        actions.add('imagelist_key_update')
        imagelist_req = True
        imagelist_key_value_add_req = True
        imagelist_key = options.key_set_imagelist
    if options.key_del_imagelist:
        actions.add('imagelist_key_del')
        imagelist_req = True
        imagelist_key = options.key_del_imagelist
      
    if options.key_value_imagelist:
        actions.add('imagelist_key_update')
        imagelist_req = True
        imagelist_key_set_req = True
        imagelist_key_value = options.key_value_imagelist

    if options.import_imagelist_smime:
        actions.add('imagelist_import_smime')
        
        imagelist_import_smime = options.import_imagelist_smime
    if options.import_imagelist_json:
        actions.add('imagelist_import_json')
        
        imagelist_import_json = options.import_imagelist_json
    if options.list_image:
        actions.add('image_list')
    if options.select_image:
        imageUuid = options.select_image
    
    if options.add_image:
        actions.add('image_add')
        image_req = True
        
        
    if options.del_image:
        actions.add('image_del')
        image_req = True
    
    if options.show_image:
        actions.add('image_show')
        image_req = True
    
    if options.keys_image:
        actions.add('image_keys')
        imagelist_req = True
        image_req = True

    if options.key_set_image:
        actions.add('image_key_update')
        image_req = True
        image_key_value_add_req = True
        image_key = options.key_set_image

    if options.key_value_image:
        actions.add('image_key_update')
        image_req = True
        image_key_req = True
        image_key_value = options.key_value_image
    if options.upload_image:
        actions.add('image_upload')
        imageFileLocal = options.upload_image
    if options.database:
        databaseConnectionString = options.database
    if options.config_file:
        dishCfg = options.config_file
    
    
    
    
    actionsLen = len(actions)
    if actionsLen == 0:
        log.error('No actions added')
        sys.exit(1)
    if actionsLen > 1:
        log.error('To many actions added')
        sys.exit(1)
    
    # Now default unset values
    
    if databaseConnectionString == None:
        databaseConnectionString = 'sqlite:///vmcaster.db'
        log.info("Defaulting DB connection to '%s'" % (databaseConnectionString))
    
    # Now check for required fields
    
    if imagelist_req:
        if imagelistUUID == None:
            log.error('Image list UUID is needed')
            sys.exit(1)
    if image_req:
        if imageUuid == None:
            log.error('Image UUID is needed')
            sys.exit(1)
    if endorser_req:
        if endorserSub == None:
            log.error('Endorser subject is needed')
            sys.exit(1)
    if dishCfg == None:
        dishCfg = os.path.join(signingPathHome,".vmcaster.cfg")
        if not os.path.isfile(dishCfg):
            log.info("Config file '%s' not found, using system defaults" % (dishCfg))
            dishCfgNew = "/etc/vmcaster/vmcaster.cfg"
            log.info("Config file '%s' not found, using system defaults" % (dishCfg,dishCfgNew))
            dishCfg = dishCfgNew
        

    if not os.path.isfile(dishCfg):
        log.error("Configuration file '%s' was not found." % dishCfg)
        sys.exit(1)
    
    # now do the work.

    imagepub = dishpubstate.imagelistpub(databaseConnectionString)
    
    if 'endorser_list' in actions:
        imagepub.endorserList()
    if 'endorser_show' in actions:
        output = json.dumps(imagepub.endorserDump(endorserSub),sort_keys=True, indent=4)
        if output != None:
            print output
    
    if 'endorser_add' in actions:
        imagepub.endorserAdd(endorserSub)
    if 'endorser_del' in actions:
        imagepub.endorserDel(endorserSub)
    if 'endorser_key_set' in actions:
        imagepub.endorserMetadataUpdate(endorserSub,endorserKey,endorserValue)
    if 'endorser_key_del' in actions:
        imagepub.endorserMetadataDel(endorserSub,endorserKey)
    
    if 'connect' in actions:
        imagepub.imageListEndorserConnect(imagelistUUID,endorserSub)

    if 'disconnect' in actions:
        imagepub.imageListEndorserDisconnect(imagelistUUID,endorserSub)
    
    if 'imagelist_list' in actions:
        imagepub.imageListList()
    if 'imagelist_show' in actions:
        output = json.dumps(imagepub.imageListShow(imagelistUUID),sort_keys=True, indent=4)
        if output != None:
            print output
    
    if 'imagelist_add' in actions:
        imagepub.imageListAdd(imagelistUUID)
    
    if 'imagelist_del' in actions:
        imagepub.imagesDel(imagelistUUID)
    if 'imagelist_key_update' in actions:
        imagepub.imagelist_key_update(imagelistUUID, imagelist_key, imagelist_key_value)
    if 'imagelist_key_del' in actions:
        imagepub.imagelist_key_del(imagelistUUID, imagelist_key)
    
    if 'imagelist_import_smime' in actions:
        
        
        fp = open (imagelist_import_smime)
        inportText = fp.read()
        buf = M2Crypto.BIO.MemoryBuffer(str(inportText))
        try:
            p7, data = M2Crypto.SMIME.smime_load_pkcs7_bio(buf)
        except AttributeError, e:
            log.error("Failed to load SMIME")
            raise e
        readData = data.read()
        try:
            candidate = json.loads(str(readData))
        except ValueError:
            log.error("Failed to parse JSON.")
            sys.exit(20)
            
        if candidate == None:
            log.error("No JSON content.")
            sys.exit(21)
        
        imagepub.importer(candidate)
        
        
        
    if 'image_list' in actions:
        images = imagepub.imageList()
        for item in images:
            print item
    if 'image_add' in actions:
        imagepub.imagelist_image_add(imagelistUUID,imageUuid)
        return
    if 'image_show' in actions:
        output = json.dumps(imagepub.imageShow(imageUuid),sort_keys=True, indent=4)
        if output != None:
            print output
        
    if 'image_del' in actions:
        imagepub.imagelist_image_delete(imageUuid)
        return
    
    
    
    if 'image_key_update' in actions:
        imagepub.image_key_update(imageUuid ,image_key, image_key_value)

    if 'image_keys' in actions:
        imagepub.image_keys(imagelistUUID, imageUuid)
    if 'image_upload' in actions:
        listOfImagelists = imagepub.image_get_imagelist(imageUuid)
        if len(listOfImagelists) == 0:
            log.error("No matching image list found")
            sys.exit(45)
        ThisImageListUuid = str(listOfImagelists[0])
        reuiredImageType = imagepub.image_key_get(imageUuid,"hv:format")
        if reuiredImageType == None:
            log.debug("Using raw image in provided format")
        else:
            ms = magic.open(magic.MAGIC_NONE)
            ms.load()
            sourceImageType =  ms.file(imageFileLocal)
            sFieldList =  sourceImageType.split(',')
            rFeildList = reuiredImageType.split(".")
            mappings = { 'bz2' : "bzip2 compressed data",
                'gz' : "gzip compressed data" }
            
            shouldCompress = False
            if rFeildList[-1] in mappings.keys():
                if sFieldList[0] != mappings[rFeildList[-1]]:
                    log.info("The image you are uploading should be compresed.")
                    shouldCompress = True
                else:
                    log.debug("File type is as expected")
            localPath = imageFileLocal
            if shouldCompress:
                mytempdir = tempfile.mkdtemp()
                tmpfilePath = os.path.join(mytempdir,"compressed")
                #shutil.copyfile(imageFileLocal,tmpfilePath )
                cmd = 'cat %s | gzip -c > %s.gz' % (imageFileLocal,tmpfilePath)
                if rFeildList[-1] == "bz2":
                    cmd = 'cat %s | bzip2 -c > %s.bz2' % (imageFileLocal,tmpfilePath)
                log.info("Compresing source image '%s'." % (cmd))
                rc,output = commands.getstatusoutput(cmd)
                if rc != 0 :
                    log.error(output)
                    sys.exit(1)
                combinedNamesList = []
                for filename in os.listdir(mytempdir):
                    combainedName = os.path.join(mytempdir,filename)
                    if os.path.isfile(combainedName):
                        combinedNamesList.append(filename)
                uploadablefileName = ""
                if len(combinedNamesList) > 1:
                    print "unknown file found"
                    sys.exit(1)
                if len(combinedNamesList) == 0:
                    print "compresed file not found"
                    sys.exit(1)
                imageName = combinedNamesList[0]
                localPath = os.path.join(mytempdir,imageName)
        m = hashlib.sha512()
        filelength = 0
        for line in open(localPath,'r'):
            filelength += len(line)
            m.update(line)

        sha512 = imagepub.image_key_get(imageUuid,"sl:checksum:sha512")
        
        if sha512 == m.hexdigest():
            log.info("Image unchanged, aborting uppdate.")
            sys.exit(0)
        
        
        uri = imagepub.imagelist_key_get(ThisImageListUuid,"hv:uri")
        parsedUri = uglyUriParser(uri)
        
        curtime = datetime.datetime.utcnow()
        imageName = "%s_%s.img.gz" % (imageUuid,curtime.strftime("%Y-%M-%d_%H-%m-%S"))
        uploadpath = os.path.join("images" , imageName)
        parsedUri['path'] = uploadpath
        timeout = 10000
        uploader = hostUploader(dishCfg)
        try:
            uploader.replaceFile(localPath,parsedUri['hostname'],uploadpath)
        except InputError, e:
            log.error(e.msg)
            sys.exit(99)
        
        
        imagepub.image_key_update(imageUuid,u'hv:size',filelength)
        imagepub.image_key_update(imageUuid,u'sl:checksum:sha512',m.hexdigest())
        
        versionOld = imagepub.image_key_get(imageUuid, "hv:version")
        versionNew = bumpVersion(versionOld)
        imagepub.image_key_update(imageUuid, "hv:version",versionNew)
        
        
        
        
        uri = uglyUriBuilder(parsedUri)
        
        imagepub.image_key_update(imageUuid,  "hv:uri", uri)
    if 'imagelist_import_json' in actions:
        f = open(imagelist_import_json)
        try:
            candidate = json.loads(str(f.read()))
        except ValueError:
            log.error("Failed to parse JSON.")
            sys.exit(20)
            
        if candidate == None:
            log.error("No JSON content.")
            sys.exit(21)
        
        imagepub.importer(candidate)
        
    if 'imagelist_upload' in actions:
        signer_key = None
        signer_cert = None
        if signingPathDefaultCert != None:
            signer_cert = signingPathDefaultCert
        if signingPathDefaultKey != None:
            signer_key = signingPathDefaultKey
        if (signer_key == None) and (signingPathHome != None):
            defaultKey = ".globus/userkey.pem"
            signer_key = os.path.join(signingPathHome,defaultKey)
        if (signer_cert == None) and (signingPathHome != None):
            defaultCert = ".globus/usercert.pem"
            signer_cert = os.path.join(signingPathHome,defaultCert)
        if (signer_key == None):
            log.error("Cannot find a path to try to find the key to sign imagelist.")
            sys.exit(22)
        if (signer_cert == None):
            log.error("Cannot find a path to try to find the cerificate to check the signature of your signed imagelist.")
            sys.exit(23)
        
        if not os.path.isfile(signer_key):
            log.error("Cannot find a the key to signed imagelists when looking here '%s'." % (signer_key))
            sys.exit(24)
        
        if not os.path.isfile(signer_cert):
            log.error("Cannot find a the certificate to verify the signed imagelist when looking here '%s'." % (signer_cert))
            sys.exit(25)
        
        versionOld = imagepub.imagelist_key_get(imagelistUUID, "hv:version")
        if versionOld == None:
            log.error("Image list has not attribute 'hv:version', image upload aborted.")
            sys.exit(26)
        versionNew = bumpVersion(versionOld)
        if versionNew == None:
            versionNew = '0.0.1'
        imagepub.imagelist_key_update(imagelistUUID, "hv:version",versionNew)
        
        now = datetime.datetime.utcnow()
        servicelength = datetime.timedelta(weeks=4)
        expiry = now + servicelength
        time_format_definition = "%Y-%m-%dT%H:%M:%SZ"
        dateNow = now.strftime(time_format_definition)
        dateExpires = expiry.strftime(time_format_definition)
        imagepub.imagelist_key_update(imagelistUUID, "dc:date:created",dateNow)
        imagepub.imagelist_key_update(imagelistUUID, "dc:date:expires",dateExpires)
        
        imagepub.imagelist_key_update(imagelistUUID, "hv:version",versionNew)
        
        
        
        uri = imagepub.imagelist_key_get(imagelistUUID,"hv:uri")
        if uri == None:
            log.error("Image list has no attribute 'hv:uri', image upload aborted.")
            sys.exit(20)
        parsedUri = uglyUriParser(uri)
        mytempdir = tempfile.mkdtemp()
        tmpfilePath = os.path.join(mytempdir,"signed_file")

        smime = M2Crypto.SMIME.SMIME()
        x509 = M2Crypto.X509.load_cert(signer_cert)
        issuerSubject = x509.get_issuer()
        subject = x509.get_subject()
        
        if not imagepub.checkMissingFields(imagelistUUID,subject,issuerSubject):
            log.error("Image list has required attribute missing.")
            sys.exit(20)
        
        if pathX509Key == None or pathX509Cert == None:
            if pathX509Dir == None:
                if applicationHome == None:
                    log.error("No HOME enviroment variable.")
                    sys.exit(20)        
                pathX509Dir = "%s/%s" % (applicationHome,".globus")
                log.debug("Setting pathX509Dir=%s" % (pathX509Dir))
            if not os.path.isdir(pathX509Dir):
                log.warning("Directory '%s' does not exist, unable to guess certificates path." % (pathX509Dir))
            else:
                if pathX509Key == None:
                    pathX509Key = "%s/%s" % (pathX509Dir,"userkey.pem")
                    
                if pathX509Cert == None:
                    pathX509Cert = "%s/%s" % (pathX509Dir,"usercert.pem")
                    
                
        if pathX509Key == None:
            log.critical("Invalid Key path")
            sys.exit(21)
        if pathX509Cert == None:
            log.critical("Invalid certificate path")
            sys.exit(22)
        if not os.path.isfile(pathX509Key):
            log.critical("Key not found at path '%s'" % (pathX509Key))
            sys.exit(23)
        if not os.path.isfile(pathX509Cert):
            log.critical("Cert not found at path '%s'" % (pathX509Cert))
            sys.exit(23)
        
        smime.load_key(pathX509Key,pathX509Cert)
        fp = open(str(tmpfilePath),'w')
        
        content = json.dumps(imagepub.imageListShow(imagelistUUID),sort_keys=True, indent=4)
        
        buf = M2Crypto.BIO.MemoryBuffer(content)
        p7 = smime.sign(buf,M2Crypto.SMIME.PKCS7_DETACHED)
        buf = M2Crypto.BIO.MemoryBuffer(content)
        out = M2Crypto.BIO.MemoryBuffer()
        smime.write(out, p7, buf)
        message_signed = str(out.read())
        
        
        
        fp.write(message_signed)
        fp.close()
        uploader = hostUploader(dishCfg)
        try:
            uploader.deleteFile(parsedUri['hostname'],parsedUri['path'])
        except vmcasterpub.process.InputError, E:
            log.error(E.msg)
            sys.exit(21)
        uploader.replaceFile(tmpfilePath,parsedUri['hostname'],parsedUri['path'])
        
if __name__ == "__main__":
    main()
    
